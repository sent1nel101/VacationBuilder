package com.dmcdesigns.d308_mobile.dao;

import androidx.annotation.NonNull;
import androidx.room.InvalidationTracker;
import androidx.room.RoomOpenDelegate;
import androidx.room.migration.AutoMigrationSpec;
import androidx.room.migration.Migration;
import androidx.room.util.DBUtil;
import androidx.room.util.TableInfo;
import androidx.sqlite.SQLite;
import androidx.sqlite.SQLiteConnection;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.processing.Generated;

@Generated("androidx.room.RoomProcessor")
@SuppressWarnings({"unchecked", "deprecation", "removal"})
public final class VacationDatabaseBuilder_Impl extends VacationDatabaseBuilder {
  private volatile VacationDAO _vacationDAO;

  private volatile ExcursionDAO _excursionDAO;

  @Override
  @NonNull
  protected RoomOpenDelegate createOpenDelegate() {
    final RoomOpenDelegate _openDelegate = new RoomOpenDelegate(17, "fae007aaa9b5222362b551bca963b949", "c14347833bba6f3ecb2ed1bdfbc80e2d") {
      @Override
      public void createAllTables(@NonNull final SQLiteConnection connection) {
        SQLite.execSQL(connection, "CREATE TABLE IF NOT EXISTS `vacations` (`vacationID` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `title` TEXT, `hotelName` TEXT, `startDate` TEXT, `endDate` TEXT)");
        SQLite.execSQL(connection, "CREATE TABLE IF NOT EXISTS `excursions` (`excursionID` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `excursionName` TEXT, `excDate` TEXT, `vacationID` INTEGER NOT NULL)");
        SQLite.execSQL(connection, "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)");
        SQLite.execSQL(connection, "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, 'fae007aaa9b5222362b551bca963b949')");
      }

      @Override
      public void dropAllTables(@NonNull final SQLiteConnection connection) {
        SQLite.execSQL(connection, "DROP TABLE IF EXISTS `vacations`");
        SQLite.execSQL(connection, "DROP TABLE IF EXISTS `excursions`");
      }

      @Override
      public void onCreate(@NonNull final SQLiteConnection connection) {
      }

      @Override
      public void onOpen(@NonNull final SQLiteConnection connection) {
        internalInitInvalidationTracker(connection);
      }

      @Override
      public void onPreMigrate(@NonNull final SQLiteConnection connection) {
        DBUtil.dropFtsSyncTriggers(connection);
      }

      @Override
      public void onPostMigrate(@NonNull final SQLiteConnection connection) {
      }

      @Override
      @NonNull
      public RoomOpenDelegate.ValidationResult onValidateSchema(
          @NonNull final SQLiteConnection connection) {
        final Map<String, TableInfo.Column> _columnsVacations = new HashMap<String, TableInfo.Column>(5);
        _columnsVacations.put("vacationID", new TableInfo.Column("vacationID", "INTEGER", true, 1, null, TableInfo.CREATED_FROM_ENTITY));
        _columnsVacations.put("title", new TableInfo.Column("title", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
        _columnsVacations.put("hotelName", new TableInfo.Column("hotelName", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
        _columnsVacations.put("startDate", new TableInfo.Column("startDate", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
        _columnsVacations.put("endDate", new TableInfo.Column("endDate", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
        final Set<TableInfo.ForeignKey> _foreignKeysVacations = new HashSet<TableInfo.ForeignKey>(0);
        final Set<TableInfo.Index> _indicesVacations = new HashSet<TableInfo.Index>(0);
        final TableInfo _infoVacations = new TableInfo("vacations", _columnsVacations, _foreignKeysVacations, _indicesVacations);
        final TableInfo _existingVacations = TableInfo.read(connection, "vacations");
        if (!_infoVacations.equals(_existingVacations)) {
          return new RoomOpenDelegate.ValidationResult(false, "vacations(com.dmcdesigns.d308_mobile.entities.Vacation).\n"
                  + " Expected:\n" + _infoVacations + "\n"
                  + " Found:\n" + _existingVacations);
        }
        final Map<String, TableInfo.Column> _columnsExcursions = new HashMap<String, TableInfo.Column>(4);
        _columnsExcursions.put("excursionID", new TableInfo.Column("excursionID", "INTEGER", true, 1, null, TableInfo.CREATED_FROM_ENTITY));
        _columnsExcursions.put("excursionName", new TableInfo.Column("excursionName", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
        _columnsExcursions.put("excDate", new TableInfo.Column("excDate", "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY));
        _columnsExcursions.put("vacationID", new TableInfo.Column("vacationID", "INTEGER", true, 0, null, TableInfo.CREATED_FROM_ENTITY));
        final Set<TableInfo.ForeignKey> _foreignKeysExcursions = new HashSet<TableInfo.ForeignKey>(0);
        final Set<TableInfo.Index> _indicesExcursions = new HashSet<TableInfo.Index>(0);
        final TableInfo _infoExcursions = new TableInfo("excursions", _columnsExcursions, _foreignKeysExcursions, _indicesExcursions);
        final TableInfo _existingExcursions = TableInfo.read(connection, "excursions");
        if (!_infoExcursions.equals(_existingExcursions)) {
          return new RoomOpenDelegate.ValidationResult(false, "excursions(com.dmcdesigns.d308_mobile.entities.Excursion).\n"
                  + " Expected:\n" + _infoExcursions + "\n"
                  + " Found:\n" + _existingExcursions);
        }
        return new RoomOpenDelegate.ValidationResult(true, null);
      }
    };
    return _openDelegate;
  }

  @Override
  @NonNull
  protected InvalidationTracker createInvalidationTracker() {
    final Map<String, String> _shadowTablesMap = new HashMap<String, String>(0);
    final Map<String, Set<String>> _viewTables = new HashMap<String, Set<String>>(0);
    return new InvalidationTracker(this, _shadowTablesMap, _viewTables, "vacations", "excursions");
  }

  @Override
  public void clearAllTables() {
    super.performClear(false, "vacations", "excursions");
  }

  @Override
  @NonNull
  protected Map<Class<?>, List<Class<?>>> getRequiredTypeConverters() {
    final Map<Class<?>, List<Class<?>>> _typeConvertersMap = new HashMap<Class<?>, List<Class<?>>>();
    _typeConvertersMap.put(VacationDAO.class, VacationDAO_Impl.getRequiredConverters());
    _typeConvertersMap.put(ExcursionDAO.class, ExcursionDAO_Impl.getRequiredConverters());
    return _typeConvertersMap;
  }

  @Override
  @NonNull
  public Set<Class<? extends AutoMigrationSpec>> getRequiredAutoMigrationSpecs() {
    final Set<Class<? extends AutoMigrationSpec>> _autoMigrationSpecsSet = new HashSet<Class<? extends AutoMigrationSpec>>();
    return _autoMigrationSpecsSet;
  }

  @Override
  @NonNull
  public List<Migration> getAutoMigrations(
      @NonNull final Map<Class<? extends AutoMigrationSpec>, AutoMigrationSpec> autoMigrationSpecs) {
    final List<Migration> _autoMigrations = new ArrayList<Migration>();
    return _autoMigrations;
  }

  @Override
  public VacationDAO vacationDAO() {
    if (_vacationDAO != null) {
      return _vacationDAO;
    } else {
      synchronized(this) {
        if(_vacationDAO == null) {
          _vacationDAO = new VacationDAO_Impl(this);
        }
        return _vacationDAO;
      }
    }
  }

  @Override
  public ExcursionDAO excursionDAO() {
    if (_excursionDAO != null) {
      return _excursionDAO;
    } else {
      synchronized(this) {
        if(_excursionDAO == null) {
          _excursionDAO = new ExcursionDAO_Impl(this);
        }
        return _excursionDAO;
      }
    }
  }
}
